package com.arunaedu.main;

import static com.anuraedu.common.MyLogger.LOG;
import static com.anuraedu.common.SQ.LIKESEARCH;
import static com.anuraedu.common.SQ.SAVE;
import static com.anuraedu.common.SQ.SEARCH;
import static com.anuraedu.common.SQ.STATUSSEARCH;
import static com.anuraedu.common.SQ.getResult;
import com.anuraedu.db.DB;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author ASUS
 */
public class StudentPayment extends javax.swing.JInternalFrame {

    DefaultTableModel dtm1;

    public StudentPayment() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bif = (BasicInternalFrameUI) this.getUI();
        bif.setNorthPane(null);

        txt_studentID.grabFocus();

        genaratePaymentId();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txt_paymentId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_classId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txt_studentID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txt_paymentType = new javax.swing.JTextField();
        txt_payment = new javax.swing.JTextField();
        cbox_studentIdSuggestions = new javax.swing.JCheckBox();
        cbox_studentIdshowAll = new javax.swing.JCheckBox();
        cbox_paymentTypeSuggestions = new javax.swing.JCheckBox();
        cbox_paymentTypeshowAll = new javax.swing.JCheckBox();
        cbox_classIdshowAll = new javax.swing.JCheckBox();
        cbox_classidSuggestions = new javax.swing.JCheckBox();
        txt_relevantDate = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        txt_total = new javax.swing.JTextField();
        txt_otherHandPayment = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_balance = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable_0 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_3 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable_4 = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1670, 1040));

        jPanel1.setBackground(new java.awt.Color(111, 187, 217));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        txt_paymentId.setEditable(false);
        txt_paymentId.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_paymentId.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(76, 76, 76));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Payment ID");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(76, 76, 76));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Class ID");

        txt_classId.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_classId.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txt_classId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_classIdKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(76, 76, 76));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Relevant Date");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(76, 76, 76));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Student ID");

        txt_studentID.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_studentID.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txt_studentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_studentIDKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(76, 76, 76));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Payment");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(76, 76, 76));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Payment Type");

        txt_paymentType.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_paymentType.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txt_paymentType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_paymentTypeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_paymentTypeFocusLost(evt);
            }
        });
        txt_paymentType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txt_paymentTypeMouseExited(evt);
            }
        });
        txt_paymentType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_paymentTypeKeyReleased(evt);
            }
        });

        txt_payment.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_payment.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txt_payment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_paymentMouseClicked(evt);
            }
        });
        txt_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_paymentActionPerformed(evt);
            }
        });
        txt_payment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_paymentKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_paymentKeyTyped(evt);
            }
        });

        buttonGroup1.add(cbox_studentIdSuggestions);
        cbox_studentIdSuggestions.setSelected(true);
        cbox_studentIdSuggestions.setText("suggestions");
        cbox_studentIdSuggestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbox_studentIdSuggestionsActionPerformed(evt);
            }
        });

        buttonGroup1.add(cbox_studentIdshowAll);
        cbox_studentIdshowAll.setText("Show all");
        cbox_studentIdshowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbox_studentIdshowAllActionPerformed(evt);
            }
        });

        buttonGroup2.add(cbox_paymentTypeSuggestions);
        cbox_paymentTypeSuggestions.setSelected(true);
        cbox_paymentTypeSuggestions.setText("suggestions");
        cbox_paymentTypeSuggestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbox_paymentTypeSuggestionsActionPerformed(evt);
            }
        });

        buttonGroup2.add(cbox_paymentTypeshowAll);
        cbox_paymentTypeshowAll.setText("Show all");
        cbox_paymentTypeshowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbox_paymentTypeshowAllActionPerformed(evt);
            }
        });

        buttonGroup3.add(cbox_classIdshowAll);
        cbox_classIdshowAll.setText("Show all");
        cbox_classIdshowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbox_classIdshowAllActionPerformed(evt);
            }
        });

        buttonGroup3.add(cbox_classidSuggestions);
        cbox_classidSuggestions.setSelected(true);
        cbox_classidSuggestions.setText("suggestions");
        cbox_classidSuggestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbox_classidSuggestionsActionPerformed(evt);
            }
        });

        txt_relevantDate.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_classId, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(txt_payment)
                            .addComponent(txt_relevantDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbox_classidSuggestions)
                            .addComponent(cbox_classIdshowAll))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txt_studentID, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_paymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_paymentType, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbox_studentIdSuggestions)
                            .addComponent(cbox_studentIdshowAll)
                            .addComponent(cbox_paymentTypeSuggestions)
                            .addComponent(cbox_paymentTypeshowAll))
                        .addContainerGap(27, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_studentID)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cbox_studentIdSuggestions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbox_studentIdshowAll)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_paymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_paymentType, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(cbox_paymentTypeSuggestions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbox_paymentTypeshowAll)))
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_classId, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cbox_classidSuggestions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbox_classIdshowAll)))
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_relevantDate, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        txt_total.setEditable(false);
        txt_total.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_total.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        txt_otherHandPayment.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_otherHandPayment.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txt_otherHandPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_otherHandPaymentActionPerformed(evt);
            }
        });
        txt_otherHandPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_otherHandPaymentKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(76, 76, 76));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Total");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(76, 76, 76));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Final Payment");

        txt_balance.setEditable(false);
        txt_balance.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txt_balance.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txt_balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_balanceActionPerformed(evt);
            }
        });
        txt_balance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_balanceKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(76, 76, 76));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Balance");

        jButton1.setText("Genarate Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_total, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(txt_otherHandPayment)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_balance, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_otherHandPayment)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_balance)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Relevant Date"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jTable_0.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 2));
        jTable_0.setForeground(new java.awt.Color(0, 0, 102));
        jTable_0.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id_class", "class_payment", "relevent_date"
            }
        ));
        jScrollPane6.setViewportView(jTable_0);
        if (jTable_0.getColumnModel().getColumnCount() > 0) {
            jTable_0.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Class Payment", jScrollPane6);

        jTable_1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "First name", "Last name", "NIC", "Contact No.", "Address", "Email", "Gender", "DOB", "FTHR.Fname", "FTHR.Lname", "FTHR.ContactNo.", "MTH.Fname", "MTH.Lname", "MTH.ContactNo.", "GDN.Fname", "GDN.Lname", "GDN.ContactNo.", "Status"
            }
        ));
        jTable_1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_1);

        jTabbedPane1.addTab("Student ID Search", jScrollPane1);

        jTable_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payment ID", "Description", "Amount", "Status"
            }
        ));
        jTable_2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_2);

        jTabbedPane1.addTab("Payment Types", jScrollPane2);

        jTable_3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Description", "Contract ID", "Class Fees", "status"
            }
        ));
        jTable_3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_3MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable_3);

        jTabbedPane1.addTab("Class ID Search", jScrollPane4);

        jTable_4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102), 2));
        jTable_4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Other Payment Type", "Payment"
            }
        ));
        jScrollPane7.setViewportView(jTable_4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
                        .addComponent(jScrollPane7))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1045, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_paymentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_paymentActionPerformed

    private void txt_otherHandPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_otherHandPaymentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_otherHandPaymentActionPerformed

    private void txt_balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_balanceActionPerformed

    }//GEN-LAST:event_txt_balanceActionPerformed

    private void cbox_studentIdshowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbox_studentIdshowAllActionPerformed
        if (cbox_studentIdshowAll.isSelected()) {
            jTabbedPane1.setSelectedIndex(1);
            removeAllRows(jTable_1);
            fillTable(1);
        }
    }//GEN-LAST:event_cbox_studentIdshowAllActionPerformed

    private void cbox_studentIdSuggestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbox_studentIdSuggestionsActionPerformed
        if (cbox_studentIdSuggestions.isSelected()) {
            jTabbedPane1.setSelectedIndex(1);
        }
    }//GEN-LAST:event_cbox_studentIdSuggestionsActionPerformed

    private void cbox_paymentTypeshowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbox_paymentTypeshowAllActionPerformed
        if (cbox_paymentTypeshowAll.isSelected()) {
            jTabbedPane1.setSelectedIndex(2);
            removeAllRows(jTable_2);
            fillTable(2);
        }
    }//GEN-LAST:event_cbox_paymentTypeshowAllActionPerformed

    private void cbox_classIdshowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbox_classIdshowAllActionPerformed
        if (cbox_classIdshowAll.isSelected()) {
            jTabbedPane1.setSelectedIndex(3);
            removeAllRows(jTable_3);
            fillTable(3);
        }
    }//GEN-LAST:event_cbox_classIdshowAllActionPerformed

    private void cbox_paymentTypeSuggestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbox_paymentTypeSuggestionsActionPerformed
        if (cbox_paymentTypeSuggestions.isSelected()) {
            jTabbedPane1.setSelectedIndex(1);
        }
    }//GEN-LAST:event_cbox_paymentTypeSuggestionsActionPerformed

    private void cbox_classidSuggestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbox_classidSuggestionsActionPerformed
        if (cbox_classidSuggestions.isSelected()) {
            jTabbedPane1.setSelectedIndex(1);
        }
    }//GEN-LAST:event_cbox_classidSuggestionsActionPerformed

    private void txt_studentIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_studentIDKeyReleased
        if (cbox_studentIdSuggestions.isSelected()) {
            removeAllRows(jTable_1);

            try {
                LIKESEARCH("student", "id_student", txt_studentID.getText());
                fillTableProcess(1);
            } catch (Exception e) {
                LOG(e);
            }

        }
        if (evt.getKeyCode() == 10) {
            fillRemainingPayments();
            txt_paymentType.grabFocus();
        }
    }//GEN-LAST:event_txt_studentIDKeyReleased

    private void txt_paymentTypeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_paymentTypeKeyReleased
        if (cbox_paymentTypeSuggestions.isSelected()) {
            removeAllRows(jTable_2);

            try {
                LIKESEARCH("stdother_paymenttype", "id_paymenttype", txt_paymentType.getText());
                fillTableProcess(2);
            } catch (Exception e) {
                LOG(e);
            }

        }
        if (evt.getKeyCode() == 10) {
            txt_payment.grabFocus();
            if (!(txt_paymentType.getText().equals("MONTHLIY.CLASS"))) {
                txt_classId.setText("");
                txt_classId.setEditable(false);
                txt_classId.setFocusable(false);
                txt_relevantDate.setEditable(false);
                txt_relevantDate.setFocusable(false);
            } else {
                txt_classId.setText("");
                txt_classId.setEditable(true);
                txt_classId.setFocusable(true);
                txt_relevantDate.setEditable(true);
                txt_relevantDate.setFocusable(true);
            }
        }
    }//GEN-LAST:event_txt_paymentTypeKeyReleased

    private void txt_classIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_classIdKeyReleased
        if (cbox_classidSuggestions.isSelected()) {
            removeAllRows(jTable_3);

            try {
                LIKESEARCH("class", "id_class", txt_classId.getText());
                fillTableProcess(3);
            } catch (Exception e) {
                LOG(e);
            }

        }

        if (evt.getKeyCode() == 10) {
            try {
                ResultSet rs = DB.search("select class_fees from class where id_class='" + txt_classId.getText() + "'");
                if (rs.next()) {
                    txt_payment.setText(Double.toString(rs.getDouble("class_fees")));
                }
            } catch (Exception e) {
               LOG(e);
            }

        }
    }//GEN-LAST:event_txt_classIdKeyReleased

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked

    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void txt_paymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_paymentKeyReleased
        if (evt.getKeyCode() == 10) {
            if (!(txt_paymentType.getText().equals("MONTHLIY.CLASS"))) {

                Vector v = new Vector();
                try {
                    if (checkOtherSTDPrevPayments()) {
//                        if (STATUSSEARCH("student", "id_student", txt_studentID.getText())) {

//                if (jTable_0.getRowCount() != 0) {
//                    for (int i = 0; i < jTable_0.getRowCount(); i++) {
//                        if (txt_classId.getText().equals(jTable_0.getValueAt(i, 0).toString())) {
//                            
//                            throw new UnsupportedOperationException(); 
//                        } 
//                    }
//                }
                            v.add(txt_paymentType.getText());
                            v.add(txt_payment.getText());

                            DefaultTableModel dtm = (DefaultTableModel) jTable_4.getModel();
                            dtm.addRow(v);
                            newInvice();
                            txt_paymentType.grabFocus();

//                        } else {
//                            JOptionPane.showMessageDialog(this, "Student is Inactive !");
//                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Already has payed !");
                    }
                } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(this, "Select the Relevent Date !");
                } catch (UnsupportedOperationException e) {
                    JOptionPane.showMessageDialog(this, "Same payment repeating!");
                } catch (Exception e) {
                    LOG(e);
                }
            } else {

                Vector v = new Vector();
                try {

                    if (STATUSSEARCH("student", "id_student", txt_studentID.getText())) {
//                        if (STATUSSEARCH("class", "id_class", txt_classId.getText())) {
                            if (checkClassPrevPayments()) {

                                String dob1 = txt_relevantDate.getText();

                                if (jTable_0.getRowCount() != 0) {
                                    for (int i = 0; i < jTable_0.getRowCount(); i++) {
                                        if (txt_classId.getText().equals(jTable_0.getValueAt(i, 0).toString()) && dob1.equals(jTable_0.getValueAt(i, 2).toString())) {

                                            throw new UnsupportedOperationException();
                                        }
                                    }
                                }

                                v.add(txt_classId.getText());
                                v.add(txt_payment.getText());
                                v.add(dob1);

                                DefaultTableModel dtm = (DefaultTableModel) jTable_0.getModel();
                                dtm.addRow(v);
                                newInvice();
                                jTabbedPane1.setSelectedIndex(0);
                                txt_paymentType.grabFocus();
                            } else {
                                JOptionPane.showMessageDialog(this, "Already has Payed !");
                            }
//                        } else {
//                            JOptionPane.showMessageDialog(this, "Class is Inactive !");
//                        }
                    } else {

                        JOptionPane.showMessageDialog(this, "Student is Inactive !");
                    }

                } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(this, "Select the Relevent Date !");
                } catch (UnsupportedOperationException e) {
                    JOptionPane.showMessageDialog(this, "Same payment repeating!");
                } catch (Exception e) {
                    LOG(e);
                }
            }

        }
        if (evt.getKeyCode() == 40) {
            getTotal();
            txt_otherHandPayment.grabFocus();
        }
    }//GEN-LAST:event_txt_paymentKeyReleased

    private void jTable_1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_1MouseClicked
        getValueOnClick(jTabbedPane1.getSelectedIndex());
        fillRemainingPayments();
        if (txt_classId.getText() != "") {
            try {
                ResultSet rs = DB.search("select class_fees from class where id_class='" + txt_classId.getText() + "'");
                if (rs.next()) {
                    txt_payment.setText(Double.toString(rs.getDouble("class_fees")));
                }
            } catch (Exception e) {
                LOG(e);
            }

        }

    }//GEN-LAST:event_jTable_1MouseClicked

    private void jTable_2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_2MouseClicked
        getValueOnClick(jTabbedPane1.getSelectedIndex());
        if (!(txt_paymentType.getText().equals("MONTHLIY.CLASS"))) {
            try {
                ResultSet rs = DB.search("select amount from stdother_paymenttype where id_paymenttype='" + txt_paymentType.getText() + "'");
                if (rs.next()) {
                    txt_payment.setText(Double.toString(rs.getDouble("amount")));
                }
            } catch (Exception e) {
                LOG(e);
            }
        }
    }//GEN-LAST:event_jTable_2MouseClicked

    private void jTable_3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_3MouseClicked
        getValueOnClick(jTabbedPane1.getSelectedIndex());
    }//GEN-LAST:event_jTable_3MouseClicked

    private void txt_paymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_paymentMouseClicked
        if (txt_classId.getText() != "") {
            try {
                ResultSet rs = DB.search("select class_fees from class where id_class='" + txt_classId.getText() + "'");
                if (rs.next()) {
                    txt_payment.setText(Double.toString(rs.getDouble("class_fees")));
                }
            } catch (Exception e) {
                LOG(e);
            }

        }
        if (!(txt_paymentType.getText().equals("MONTHLIY.CLASS"))) {
            try {
                ResultSet rs = DB.search("select amount from stdother_paymenttype where id_paymenttype='" + txt_paymentType.getText() + "'");
                if (rs.next()) {
                    txt_payment.setText(Double.toString(rs.getDouble("amount")));
                }
            } catch (Exception e) {
                LOG(e);
            }
        }


    }//GEN-LAST:event_txt_paymentMouseClicked

    private void txt_paymentTypeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_paymentTypeFocusLost

    }//GEN-LAST:event_txt_paymentTypeFocusLost

    private void txt_paymentTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_paymentTypeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_paymentTypeFocusGained

    private void txt_paymentTypeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_paymentTypeMouseExited
//        if (!(txt_paymentType.getText().equals("MONTHLIY.CLASS"))) {
//            txt_classId.setText("");
//            txt_classId.setEditable(false);
//            txt_classId.setFocusable(false);
//            jDateChooser_relevantDate.setEnabled(false);
//        } else {
//            txt_classId.setText("");
//            txt_classId.setEditable(true);
//            txt_classId.setFocusable(true);
//            jDateChooser_relevantDate.setEnabled(true);
//        }
    }//GEN-LAST:event_txt_paymentTypeMouseExited

    private void txt_otherHandPaymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_otherHandPaymentKeyReleased
        if (evt.getKeyCode() == 10) {
            if (Double.parseDouble(txt_total.getText()) <= Double.parseDouble(txt_otherHandPayment.getText())) {
                balance();
                txt_balance.grabFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Payment is not enough !");
                txt_otherHandPayment.grabFocus();
            }

        }
    }//GEN-LAST:event_txt_otherHandPaymentKeyReleased

    private void txt_balanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_balanceKeyReleased
        if (evt.getKeyCode() == 10) {
            try {

                DB.push("insert into student_payment values('"
                        + txt_paymentId.getText() + "','"
                        + txt_studentID.getText() + "','"
                        + Double.parseDouble(txt_total.getText()) + "','"
                        + Double.parseDouble(txt_otherHandPayment.getText()) + "','"
                        + Double.parseDouble(txt_balance.getText()) + "',now())");

                if (jTable_0.getRowCount() != 0) {
                    for (int raw = 0; raw < jTable_0.getRowCount(); raw++) {

                        String id_student = txt_studentID.getText();
                        String id_class = jTable_0.getValueAt(raw, 0).toString();
                        String id_payment = txt_paymentId.getText();
                        Double class_payment = Double.parseDouble(jTable_0.getValueAt(raw, 1).toString());
                        String relevent_date = jTable_0.getValueAt(raw, 2).toString();
                        String lecturer_id = null;
                        ResultSet rs = DB.search("SELECT id_lecturer FROM lecturer_contract where id_contract=(select id_contract from class where id_class='" + id_class + "');");
                        if (rs.next()) {
                            lecturer_id = rs.getString("id_lecturer");
                        }

                        DB.push("insert into class_payment (id_student,id_class,id_payment,class_payment,relevant_date,payment_datetime,id_lecturer) values('"
                                + id_student + "','"
                                + id_class + "','"
                                + id_payment + "','"
                                + class_payment + "','"
                                + relevent_date + "',now(),'" + lecturer_id + "')");
                    }

                }

                if (jTable_4.getRowCount() != 0) {
                    for (int raw = 0; raw < jTable_4.getRowCount(); raw++) {
                        String id_payment = txt_paymentId.getText();
                        String id_stdpaymenttype = jTable_4.getValueAt(raw, 0).toString();
                        String id_student = txt_studentID.getText();
                        Double payment = Double.parseDouble(jTable_4.getValueAt(raw, 1).toString());

                        DB.push("insert into std_otherpayment (id_payment,id_stdpaymenttype,id_student,payment) values('"
                                + id_payment + "','"
                                + id_stdpaymenttype + "','"
                                + id_student + "','"
                                + payment + "')");
                    }

                }
                JOptionPane.showMessageDialog(this, "Saved !");
                txt_studentID.grabFocus();
                clearAll();
                fillRemainingPayments();

            } catch (Exception e) {
                LOG(e);
            }
        }
    }//GEN-LAST:event_txt_balanceKeyReleased
    private boolean point = false;
    private void txt_paymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_paymentKeyTyped

        char Char = evt.getKeyChar();
        if (txt_payment.getText().equals("")) {
            point = false;
        }
        if (point == false) {
            if (Char == '.') {
                point = true;
            } else if (!(Character.isDigit(Char) || (Char == KeyEvent.VK_BACK_SPACE) || (Char == KeyEvent.VK_DELETE))) {
                evt.consume();
            }
        } else {
            if (!(Character.isDigit(Char) || (Char == KeyEvent.VK_BACK_SPACE) || (Char == KeyEvent.VK_DELETE))) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txt_paymentKeyTyped

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        txt_classId.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0));
        txt_relevantDate.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 1));
        txt_paymentType.setText("MONTHLIY.CLASS");

        try {
            ResultSet rs = DB.search("select class_fees from class where id_class='" + txt_classId.getText() + "'");
            if (rs.next()) {
                txt_payment.setText(Double.toString(rs.getDouble("class_fees")));
            }
        } catch (Exception e) {
            LOG(e);
        }


    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        paymentReport();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JCheckBox cbox_classIdshowAll;
    private javax.swing.JCheckBox cbox_classidSuggestions;
    private javax.swing.JCheckBox cbox_paymentTypeSuggestions;
    private javax.swing.JCheckBox cbox_paymentTypeshowAll;
    private javax.swing.JCheckBox cbox_studentIdSuggestions;
    private javax.swing.JCheckBox cbox_studentIdshowAll;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable_0;
    private javax.swing.JTable jTable_1;
    private javax.swing.JTable jTable_2;
    private javax.swing.JTable jTable_3;
    private javax.swing.JTable jTable_4;
    private javax.swing.JTextField txt_balance;
    private javax.swing.JTextField txt_classId;
    private javax.swing.JTextField txt_otherHandPayment;
    private javax.swing.JTextField txt_payment;
    private javax.swing.JTextField txt_paymentId;
    private javax.swing.JTextField txt_paymentType;
    private javax.swing.JTextField txt_relevantDate;
    private javax.swing.JTextField txt_studentID;
    private javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables

    private void genaratePaymentId() {
        try {
            ResultSet rs = DB.search("select count(*) as paymentId_count from student_payment");
            if (rs.next()) {
                int count = rs.getInt("paymentId_count");
                String prdtid = "AE/STDNT/PYMNT" + (++count);
                txt_paymentId.setText(prdtid);
            }
        } catch (Exception e) {
            LOG(e);
        }
    }

    private void removeAllRows(JTable j) {
        for (int i = j.getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) j.getModel()).removeRow(i);
        }
    }

    private void fillTable(int i) {
        try {
            if (i == 1) {
                SEARCH("student");
            } else if (i == 2) {
                SEARCH("stdother_paymenttype");
            } else if (i == 3) {
                SEARCH("class");
            }

            fillTableProcess(i);
        } catch (Exception e) {
            LOG(e);
        }
    }

    private void fillTableProcess(int i) {

        try {

            ResultSet rs = getResult();
            while (rs.next()) {
                if (i == 1) {
                    String id_student = rs.getString("id_student");
                    String fname = rs.getString("fname");
                    String lname = rs.getString("lname");
                    String nic = rs.getString("nic");
                    String contact_no = rs.getString("contact_no");
                    String address = rs.getString("address");
                    String email = rs.getString("email");
                    String gender = rs.getString("gender");
                    String dob = rs.getString("dob");
                    String father_fname = rs.getString("father_fname");
                    String father_lname = rs.getString("father_lname");
                    String father_ctn = rs.getString("father_ctn");
                    String mother_fname = rs.getString("mother_fname");
                    String mother_lname = rs.getString("mother_lname");
                    String mother_ctn = rs.getString("mother_ctn");
                    String guardian_fname = rs.getString("guardian_fname");
                    String guardian_lname = rs.getString("guardian_lname");
                    String guardian_ctn = rs.getString("guardian_ctn");

                    boolean status = rs.getBoolean("status");

                    Vector v = new Vector();

                    v.add(id_student);
                    v.add(fname);
                    v.add(lname);
                    v.add(nic);
                    v.add(contact_no);
                    v.add(address);
                    v.add(email);
                    v.add(gender);
                    v.add(dob);
                    v.add(father_fname);
                    v.add(father_lname);
                    v.add(father_ctn);
                    v.add(mother_fname);
                    v.add(mother_lname);
                    v.add(mother_ctn);
                    v.add(guardian_fname);
                    v.add(guardian_lname);
                    v.add(guardian_ctn);

                    if (status) {
                        v.add("Active");
                    } else {
                        v.add("Inactive");
                    }

                    dtm1 = (DefaultTableModel) jTable_1.getModel();
                    dtm1.addRow(v);
                } else if (i == 2) {
                    String id_paymenttype = rs.getString("id_paymenttype");
                    String description = rs.getString("description");
                    String amount = Double.toString(rs.getDouble("amount"));
                    boolean status = rs.getBoolean("status");

                    Vector v = new Vector();

                    v.add(id_paymenttype);
                    v.add(description);
                    v.add(amount);
                    if (status) {
                        v.add("Active");
                    } else {
                        v.add("Inactive");
                    }

                    dtm1 = (DefaultTableModel) jTable_2.getModel();
                    dtm1.addRow(v);
                } else if (i == 3) {
                    String id_class = rs.getString("id_class");
                    String description = rs.getString("description");
                    String id_contract = rs.getString("id_contract");
                    String class_fees = String.valueOf(rs.getDouble("class_fees"));
                    boolean status = rs.getBoolean("status");

                    Vector v = new Vector();

                    v.add(id_class);
                    v.add(description);
                    v.add(id_contract);
                    v.add(class_fees);
                    if (status) {
                        v.add("Active");
                    } else {
                        v.add("Inactive");
                    }

                    dtm1 = (DefaultTableModel) jTable_3.getModel();
                    dtm1.addRow(v);
                }

            }

        } catch (Exception e) {
           LOG(e);
        }
    }

    private void getValueOnClick(int i) {
        if (i == 1) {
            removeAllRows(jTable_0);
            removeAllRows(jTable_4);
            txt_studentID.setText((String) jTable_1.getValueAt(jTable_1.getSelectedRow(), 0));
        } else if (i == 2) {
            txt_paymentType.setText((String) jTable_2.getValueAt(jTable_2.getSelectedRow(), 0));

            if (!(txt_paymentType.getText().equals("MONTHLIY.CLASS"))) {
                txt_classId.setText("");
                txt_classId.setEditable(false);
                txt_classId.setFocusable(false);
                txt_relevantDate.setEditable(false);
                txt_relevantDate.setFocusable(false);
            } else {
                txt_classId.setText("");
                txt_classId.setEditable(true);
                txt_classId.setFocusable(true);
                txt_relevantDate.setEditable(true);
                txt_relevantDate.setFocusable(true);
            }
        } else if (i == 3) {
            txt_classId.setText((String) jTable_3.getValueAt(jTable_3.getSelectedRow(), 0));
        }
    }

    private void newInvice() {
        txt_classId.setText("");
        txt_paymentType.setText("");
        txt_payment.setText("");
    }

    private void getTotal() {
        if (!(jTable_0.getRowCount() == 0) || !(jTable_4.getRowCount() == 0)) {
            double table0Value = 0.0;
            double table4Value = 0.0;

            if (jTable_0.getRowCount() != 0) {

                for (int row = 0; row < jTable_0.getRowCount(); row++) {
                    table0Value = table0Value + Double.parseDouble(jTable_0.getValueAt(row, 1).toString());
                    System.out.println(table0Value);
                }

            }

            if (jTable_4.getRowCount() != 0) {
                for (int row = 0; row < jTable_4.getRowCount(); row++) {

                    table4Value = table4Value + Double.parseDouble(jTable_4.getValueAt(row, 1).toString());
                }

            }

            txt_total.setText(Double.toString(table4Value + table0Value));
        }
    }

    private void balance() {
        Double payment = Double.parseDouble(txt_otherHandPayment.getText());
        Double total = Double.parseDouble(txt_total.getText());

        txt_balance.setText(Double.toString(payment - total));
    }

    private void clearAll() {
        removeAllRows(jTable_0);
        removeAllRows(jTable_4);
        txt_relevantDate.setText(null);
        txt_paymentId.setText(null);
        txt_paymentType.setText(null);
        txt_classId.setText(null);
        txt_payment.setText(null);
        txt_total.setText(null);
        txt_otherHandPayment.setText(null);
        txt_balance.setText(null);

        genaratePaymentId();

    }

    private boolean checkClassPrevPayments() {
        boolean cpp = true;
        try {

            String dob1 = txt_relevantDate.getText();
            ResultSet rs = DB.search("SELECT count(*) as rowCount FROM class_payment where id_student='"
                    + txt_studentID.getText() + "' and id_class='" + txt_classId.getText() + "' and relevant_date='" + dob1 + "';");
            rs.next();
            int rowCount = rs.getInt("rowCount");
            if (rowCount != 0) {

                cpp = false;
            } else {
                cpp = true;
            }
        } catch (Exception e) {
            LOG(e);
        }
        return cpp;
    }

    private boolean checkOtherSTDPrevPayments() {
        boolean cpp = true;
        try {

            ResultSet rs = DB.search("SELECT count(*) as rowCount FROM std_otherpayment where id_student='"
                    + txt_studentID.getText() + "' and id_stdpaymenttype='" + txt_paymentType.getText() + "';");
            rs.next();
            int rowCount = rs.getInt("rowCount");
            if (rowCount != 0) {

                cpp = false;
            } else {
                cpp = true;
            }
        } catch (Exception e) {
            LOG(e);
        }
        return cpp;
    }

    private void fillRemainingPayments() {
        removeAllRows(jTable1);
        try {
            ArrayList<String> classes = new ArrayList<String>();
            ArrayList<String> assigned_date = new ArrayList<String>();
            ResultSet rs1 = DB.search("select id_class,assigned_date from student_class where id_student='" + txt_studentID.getText() + "'");

            while (rs1.next()) {
                classes.add(rs1.getString("id_class"));
                assigned_date.add(rs1.getString("assigned_date"));

            }

            for (int i = 0; i < classes.size(); i++) {

                ResultSet rs = DB.search("select xm.id_class as classid,xm.relevent_date as relevantdate,xm.id_student,xm.class_payment "
                        + "from(select dc.id_class,dc.relevent_date,cp.id_student,cp.class_payment "
                        + "from aruna_edu.datecompleted_class dc "
                        + "left join (select * from aruna_edu.class_payment where id_student = '" + txt_studentID.getText() + "') cp "
                        + "on dc.relevent_date = cp.relevant_date "
                        + "where dc.relevent_date >= '" + assigned_date.get(i) + "') as xm "
                        + "where xm.id_student is null "
                        + "and xm.id_class = '" + classes.get(i) + "'"
                        + " order by xm.id_class");
                while (rs.next()) {

                    String classid = rs.getString("classid");
                    String relavantdate = rs.getString("relevantdate");

                    Vector v = new Vector();

                    v.add(classid);
                    v.add(relavantdate);

                    DefaultTableModel dtm1 = (DefaultTableModel) jTable1.getModel();
                    dtm1.addRow(v);

                }

            }

        } catch (Exception e) {
            LOG(e);
        }
    }
    
    private void paymentReport() {
        try {
            String fullName = null;
            ResultSet rs = DB.search("select fname,lname from student where id_student='" + txt_studentID.getText() + "'");
            if (rs.next()) {
                fullName = rs.getString("fname") + " " + rs.getString("lname");
            }
            double table4Value = 0.0;
            if (jTable_4.getRowCount() != 0) {
                for (int row = 0; row < jTable_4.getRowCount(); row++) {

                    table4Value = table4Value + Double.parseDouble(jTable_4.getValueAt(row, 1).toString());
                }

            }

            DefaultTableModel de = (DefaultTableModel) jTable_0.getModel();
            JRTableModelDataSource dataSource = new JRTableModelDataSource(de);
            String path = "C:\\Users\\ASUS\\Desktop\\Jasper\\MyReports\\student_bill.jrxml";

            JasperReport compileReport = JasperCompileManager.compileReport(path);

            Map<String, Object> params = new HashMap<>();
            params.put("id_student", txt_studentID.getText());
            params.put("id_payment", txt_paymentId.getText());
            params.put("fullname", fullName);
            params.put("Other_payment", String.valueOf(table4Value));
            params.put("total", txt_total.getText());
            params.put("payment", txt_otherHandPayment.getText());
            params.put("balance", txt_balance.getText());
            

            JasperPrint fillReport = JasperFillManager.fillReport(compileReport, params, dataSource);
            JasperViewer.viewReport(fillReport, false);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
